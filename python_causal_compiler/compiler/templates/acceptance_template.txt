#!/usr/bin/env python

import time
import sys
sys.path.append('./copct-master')
import copct

def lookup_type(object_id, state):
    x = [obj_type for (obj_id,obj_type) in state if obj_id == object_id]
    if x:
        return x[0]
    else:
        return None

def get_state(state, *args):
    ret = None
    if len(args) > 0    :
        ret = dict(state)[args[0]]
    for a in range(1, len(args)):
        arg = args[a]
        ret = ret[arg]
    return ret

def causes(v):
    # v[i] = the i^th (state, action, arguments)
    # returns g, a set of possible causes of v
    states, actions, arguments = zip(*v)
    g = set()

    # INSERT CAUSES HERE

    return g

M = 0 # INSERT M HERE


def run_experiments(check_irr=True):
    results = {}
    # Dock maintenance demos
    demos = ["demo_%s_%d"%(skill, di) for di in [1,2] for skill in ["remove_red_drive","replace_red_with_green","replace_red_with_spare","swap_red_with_green"]]
    # Block stacking demos
    demos += ["demo_il", "demo_ai", "demo_um"]
    # Cover demos
    print("Covering demos...")
    for demo_name in demos:
        results[demo_name] = {}        
        results[demo_name]["run_time"] = 0.0
        results[demo_name]["run_times"] = []                
        for i in range(0,5):
            print(demo_name)
            # import demo and ground truth
            exec_str = "from baxter_corpus.%s import demo"%demo_name
            exec(exec_str, globals())
            exec_str = "from baxter_corpus.%s_ground_truth import ground_truth"%demo_name
            exec(exec_str, globals())
            # Cover and prune by each parsimony criterion
            start_time = time.clock()
            status, tlcovs, g = copct.explain(causes, demo, M=M)

            # I ADDED THIS!!
            print('copct status: %s'%status)
            print('%d covers'%len(tlcovs))

            # get most parsimonious covers
            pcovs, length = copct.minCardinalityTLCovers(tlcovs)
            print('%d covers of length %d'%(len(pcovs), length))
            
            # Show the first one
            print('First cover of length %d:'%length)
            for intention in pcovs[0][0]:
               print(intention[1:])

            results[demo_name]["run_times"].append(time.clock()-start_time)
            results[demo_name]["run_time"] += time.clock()-start_time
            results[demo_name]["tlcovs"], results[demo_name]["g"] = tlcovs, g
            results[demo_name]["tlcovs_mc"] = [u for (u,_,_,_,_) in copct.minCardinalityTLCovers(tlcovs)[0]]
            results[demo_name]["tlcovs_md"] = [u for (u,_,_,_,_) in copct.maxDepthTLCovers(tlcovs)[0]]
            results[demo_name]["tlcovs_xd"] = [u for (u,_,_,_,_) in copct.minimaxDepthTLCovers(tlcovs)[0]]
            results[demo_name]["tlcovs_mp"] = [u for (u,_,_,_,_) in copct.minParametersTLCovers(tlcovs)[0]]
            results[demo_name]["tlcovs_fsn"] = [u for (u,_,_,_,_) in copct.minForestSizeTLCovers(tlcovs)[0]]
            results[demo_name]["tlcovs_fsx"] = [u for (u,_,_,_,_) in copct.maxForestSizeTLCovers(tlcovs)[0]]
            start_time = time.clock()
            if check_irr:
                status, tlcovs_irr = copct.irredundantTLCovers(tlcovs, timeout=1000)
                if status == False: print("IRR timeout")
            else:
                tlcovs_irr = tlcovs
            results[demo_name]["run_time_irr"] = time.clock()-start_time
            results[demo_name]["tlcovs_irr"] = [u for (u,_,_,_,_) in tlcovs_irr]
            results[demo_name]["u in tlcovs"] = ground_truth in [u for (u,_,_,_,_) in tlcovs]
            results[demo_name]["u in tlcovs_mc"] = ground_truth in results[demo_name]["tlcovs_mc"]
            results[demo_name]["u in tlcovs_md"] = ground_truth in results[demo_name]["tlcovs_md"]
            results[demo_name]["u in tlcovs_xd"] = ground_truth in results[demo_name]["tlcovs_xd"]
            results[demo_name]["u in tlcovs_mp"] = ground_truth in results[demo_name]["tlcovs_mp"]
            results[demo_name]["u in tlcovs_fsn"] = ground_truth in results[demo_name]["tlcovs_fsn"]
            results[demo_name]["u in tlcovs_fsx"] = ground_truth in results[demo_name]["tlcovs_fsx"]
            results[demo_name]["u in tlcovs_irr"] = ground_truth in results[demo_name]["tlcovs_irr"]
    # display results
    criteria = ["_mc", "_irr", "_md", "_xd", "_mp", "_fsn", "_fsx"]
    # print("Accuracy:")
    # for crit in criteria:
    #     correct_demos = [d for d in results if results[d]["u in tlcovs%s"%crit]]
    #     print('%s: %f%%'%(crit, 1.0*len(correct_demos)/len(demos)))
    # print("# of covers found:")
    #print(["Demo","Runtime (explain)", "Runtime (irr)"]+criteria)
    print("Demo: Average Runtime, Standard Deviation")    
    for demo_name in demos:
        num_tlcovs = [len(results[demo_name]["tlcovs%s"%crit]) for crit in criteria]
        #print([demo_name, results[demo_name]["run_time"], results[demo_name]["run_time_irr"]]+num_tlcovs)
        avg = str(results[demo_name]["run_time"]/5.0)
        std_dev = str(calc_std_dev(results[demo_name]["run_times"], float(avg)))
        print(str(demo_name)+': '+avg+', '+std_dev)
    return results

def calc_std_dev(lst,avg):
    summ = 0.0
    for i in lst:
        summ += (i - avg)**2.0
    return (summ/float(len(lst)))**0.5

if __name__ == "__main__":

    check_irr = raw_input("Run irredundancy checks?  May take several minutes. [y/n]")
    results = run_experiments(check_irr == "y")
