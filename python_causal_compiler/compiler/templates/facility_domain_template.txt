import sys
sys.path.append('./copct-master')
 
import copct
#from load_facilit_demo import load_demo
 
# # Background Causal Knowledge:
# (moveto, obj, dest, dx, dy, dz, da) causes
#     [(grasp, obj), (release, obj, dest, dx, dy, dz, da)]    
# (stack, dest, dx, dy, dz, da, obj1) causes
#     [(move-to, obj1, dest, dx, dy, dz, da)]
#     but only if obj1 is a block.
# (stack, dest, dx, dy, dz, da, obj1, obj2, obj3, ...) causes
#     [(move-to, obj1, dest, dx, dy, dz, da), (stack, obj1, 0, 0, .5, 0, obj2, obj3, ...)]
#     but only if obj1 is a block.
# (stack-all, dx, dy, dz, da) causes
#     [(stack, 'room', dx, dy, dz, da, obj1, obj2, obj3, ...)]
#     where obj1, obj2, obj3, ... are all the blocks in the room.
def lookup_type(object_id, state):
    return [obj_type for (obj_id,obj_type,_,_,_,_) in state if obj_id == object_id][0]

def causes(v):
    # v[i] = the i^th (state, action, arguments)
    # returns g, a set of possible causes of v
    states, actions, arguments = zip(*v)
    g = set()

	# INSERT CAUSES HERE

    return g

M = 0 # INSERT M HERE

#def main():
    # Load demo
    #demo = load_demo(demo_directory='./SMILE-1.1.0/room_demo/')
    
    # interpret demo (fixed-parameter-tractable when M is small and explicitly provided)
    #status, tlcovs, g = copct.explain(causes, demo, M=M)
    #print('copct status: %s'%status)
    #print('%d covers'%len(tlcovs))

    # get most parsimonious covers
    #pcovs, length = copct.minCardinalityTLCovers(tlcovs)
    #print('%d covers of length %d'%(len(pcovs), length))
    
    # Show the first one
    #print('First cover of length %d:'%length)
    #for intention in pcovs[0][0]:
    #    print(intention[1:])

